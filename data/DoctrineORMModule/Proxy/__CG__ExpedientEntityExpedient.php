<?php

namespace DoctrineORMModule\Proxy\__CG__\Expedient\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Expedient extends \Expedient\Entity\Expedient implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = ['description' => NULL, 'observation' => NULL];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {
        unset($this->description, $this->observation);

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }

    /**
     * 
     * @param string $name
     */
    public function __get($name)
    {
        if (array_key_exists($name, $this->__getLazyProperties())) {
            $this->__initializer__ && $this->__initializer__->__invoke($this, '__get', [$name]);

            return $this->$name;
        }

        trigger_error(sprintf('Undefined property: %s::$%s', __CLASS__, $name), E_USER_NOTICE);
    }

    /**
     * 
     * @param string $name
     * @param mixed  $value
     */
    public function __set($name, $value)
    {
        if (array_key_exists($name, $this->__getLazyProperties())) {
            $this->__initializer__ && $this->__initializer__->__invoke($this, '__set', [$name, $value]);

            $this->$name = $value;

            return;
        }

        $this->$name = $value;
    }

    /**
     * 
     * @param  string $name
     * @return boolean
     */
    public function __isset($name)
    {
        if (array_key_exists($name, $this->__getLazyProperties())) {
            $this->__initializer__ && $this->__initializer__->__invoke($this, '__isset', [$name]);

            return isset($this->$name);
        }

        return false;
    }

    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', '' . "\0" . 'Expedient\\Entity\\Expedient' . "\0" . 'id', 'description', '' . "\0" . 'Expedient\\Entity\\Expedient' . "\0" . 'hours_programed', 'observation', '' . "\0" . 'Expedient\\Entity\\Expedient' . "\0" . 'user', '' . "\0" . 'Expedient\\Entity\\Expedient' . "\0" . 'place', '' . "\0" . 'Expedient\\Entity\\Expedient' . "\0" . 'designated_by', '' . "\0" . 'Expedient\\Entity\\Expedient' . "\0" . 'date_start', '' . "\0" . 'Expedient\\Entity\\Expedient' . "\0" . 'date_finish', '' . "\0" . 'Expedient\\Entity\\Expedient' . "\0" . 'updatedAt', '' . "\0" . 'Expedient\\Entity\\Expedient' . "\0" . 'createdAt'];
        }

        return ['__isInitialized__', '' . "\0" . 'Expedient\\Entity\\Expedient' . "\0" . 'id', '' . "\0" . 'Expedient\\Entity\\Expedient' . "\0" . 'hours_programed', '' . "\0" . 'Expedient\\Entity\\Expedient' . "\0" . 'user', '' . "\0" . 'Expedient\\Entity\\Expedient' . "\0" . 'place', '' . "\0" . 'Expedient\\Entity\\Expedient' . "\0" . 'designated_by', '' . "\0" . 'Expedient\\Entity\\Expedient' . "\0" . 'date_start', '' . "\0" . 'Expedient\\Entity\\Expedient' . "\0" . 'date_finish', '' . "\0" . 'Expedient\\Entity\\Expedient' . "\0" . 'updatedAt', '' . "\0" . 'Expedient\\Entity\\Expedient' . "\0" . 'createdAt'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Expedient $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

            unset($this->description, $this->observation);
        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setId($id)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setId', [$id]);

        return parent::setId($id);
    }

    /**
     * {@inheritDoc}
     */
    public function getUpdatedAt()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUpdatedAt', []);

        return parent::getUpdatedAt();
    }

    /**
     * {@inheritDoc}
     */
    public function setUpdatedAt($updatedAt)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUpdatedAt', [$updatedAt]);

        return parent::setUpdatedAt($updatedAt);
    }

    /**
     * {@inheritDoc}
     */
    public function getCreatedAt()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCreatedAt', []);

        return parent::getCreatedAt();
    }

    /**
     * {@inheritDoc}
     */
    public function setCreatedAt($createdAt)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCreatedAt', [$createdAt]);

        return parent::setCreatedAt($createdAt);
    }

    /**
     * {@inheritDoc}
     */
    public function getDescription()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDescription', []);

        return parent::getDescription();
    }

    /**
     * {@inheritDoc}
     */
    public function setDescription($description)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDescription', [$description]);

        return parent::setDescription($description);
    }

    /**
     * {@inheritDoc}
     */
    public function getObservation()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getObservation', []);

        return parent::getObservation();
    }

    /**
     * {@inheritDoc}
     */
    public function setObservation($observation)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setObservation', [$observation]);

        return parent::setObservation($observation);
    }

    /**
     * {@inheritDoc}
     */
    public function getDesignatedBy()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDesignatedBy', []);

        return parent::getDesignatedBy();
    }

    /**
     * {@inheritDoc}
     */
    public function setDesignatedBy($designated_by)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDesignatedBy', [$designated_by]);

        return parent::setDesignatedBy($designated_by);
    }

    /**
     * {@inheritDoc}
     */
    public function getUser()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUser', []);

        return parent::getUser();
    }

    /**
     * {@inheritDoc}
     */
    public function setUser($user)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUser', [$user]);

        return parent::setUser($user);
    }

    /**
     * {@inheritDoc}
     */
    public function getPlace()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPlace', []);

        return parent::getPlace();
    }

    /**
     * {@inheritDoc}
     */
    public function setPlace($place)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPlace', [$place]);

        return parent::setPlace($place);
    }

    /**
     * {@inheritDoc}
     */
    public function getDateStart()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDateStart', []);

        return parent::getDateStart();
    }

    /**
     * {@inheritDoc}
     */
    public function getDateStartStr()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDateStartStr', []);

        return parent::getDateStartStr();
    }

    /**
     * {@inheritDoc}
     */
    public function setDateStart($date_start)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDateStart', [$date_start]);

        return parent::setDateStart($date_start);
    }

    /**
     * {@inheritDoc}
     */
    public function getDateFinish()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDateFinish', []);

        return parent::getDateFinish();
    }

    /**
     * {@inheritDoc}
     */
    public function getDateFinishStr()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDateFinishStr', []);

        return parent::getDateFinishStr();
    }

    /**
     * {@inheritDoc}
     */
    public function setDateFinish($date_finish)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDateFinish', [$date_finish]);

        return parent::setDateFinish($date_finish);
    }

    /**
     * {@inheritDoc}
     */
    public function getHoursProgramed()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getHoursProgramed', []);

        return parent::getHoursProgramed();
    }

    /**
     * {@inheritDoc}
     */
    public function setHoursProgramed($hours_programed)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setHoursProgramed', [$hours_programed]);

        return parent::setHoursProgramed($hours_programed);
    }

    /**
     * {@inheritDoc}
     */
    public function __toString()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, '__toString', []);

        return parent::__toString();
    }

}
